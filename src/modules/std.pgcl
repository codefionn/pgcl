##
# Return the identity of `x` (the same object)
##
id x = x
export id

##
# Turns a left-associative expression into a right-associative expression
#
# ```
# right ((1 2) 3) == (1 (2 3))
# ```
##
right ((x y) z) = right (x (y z))
right x = x
export right

## 
# Map elements in the list with the given `f` function
##
map _ []     = []
map f [x:xs] = [(f x)] + (map f xs)
export map

##
# Reduces a list from the left side
#
# ## Parameters
#
# 1. The function to combine two elements together
# 2. The initial value
# 3. The list to combine
##
foldl _ i []     = i
foldl f i [x:xs] = foldl f (f i x) xs
export foldl

##
# Reduces a list from the right side
#
# 1. The function to combine two elements together
# 2. The initial value
# 3. The list to combine
##
foldr _ i []     = i
foldr f i [x:xs] = f x (foldr f i xs)
export foldr
