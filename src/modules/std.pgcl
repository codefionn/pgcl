str = import str
export str

##
# Return the identity of `x` (the same object)
##
id x = x
export id

##
# Turns a left-associative expression into a right-associative expression
#
# ```
# right ((1 2) 3) == (1 (2 3))
# ```
##
right ((x y) z) = right (x (y z))
right x = x
export right

## 
# Map elements in the list with the given `f` function
##
map _ []     = []
map f [x:xs] = [(f x)] + (map f xs)
export map

##
# Reduces a list from the left side
#
# ## Parameters
#
# 1. The function to combine two elements together
# 2. The initial value
# 3. The list to combine
##
foldl _ i []     = i
foldl f i [x:xs] = foldl f (f i x) xs
export foldl

##
# Reduces a list from the right side
#
# 1. The function to combine two elements together
# 2. The initial value
# 3. The list to combine
##
foldr _ i []     = i
foldr f i [x:xs] = f x (foldr f i xs)
export foldr

##
# Returns the beginning of a list. Fails spetaculary, if empty.
##
head [x:xs] = x
export head

##
# Returns the tail of a list or an empty list, if the list has no arguments
##
tail [] = []
tail [x:xs] = xs
export tail

##
# Counts the length of a list or string
##
len [] = 0
len [x:xs] = 1 + len xs
export len

##
# Joins lists with a string or list
##
join _ [] = []
join i [x:xs] = let
    lst = join i xs;
  in
    if let [] = lst then x else x + i + lst
export join

##
# Offset (start from a specified index)
##
offset 0 lst    = lst
offset _ []     = []
offset n [x:xs] = offset (n-1) xs
export offset

##
# Limit the number of elements of a list
##
limit 0 _ = []
limit _ [] = []
limit n [x:xs] = [x] + limit (n-1) xs
export limit

##
# Generate a list of lists, where each list has at most the specified length.
# Only the last list in the resulting list can have a lower length than the
# specified one.
##
chunks _ [] = []
chunks l x  = [limit l x] + chunks l (offset l x)
export chunks

##
# Converts a list to a tuple
##
tuplize [x:xs] = foldl (,) x xs
export tuplize

##
# Converts a list to calls
##
callize [x:xs] = foldl (\x \y (x y)) x xs
export callize

##
# Logical **and** operation on two booleans.
#
# ## Parameters
#
# - @true|@false
# - @true|@false
##
and @true @true = @true
and _     _     = @false
export and

##
# Logical **or** operation on two booleans.
#
# ## Parameters
#
# - @true|@false
# - @true|@false
##
or @true _     = @true
or _     @true = @true
or _     _     = @false
export or

##
# Logical **not** operation on one booleans
#
# ## Parameters
# 
# - @true|@false
##
not @true = @false
not _     = @true
export not

##
# Returns `@true`, if all elements in the given list are `@true`, otherwise
# `@false`. Returns `@false` if the given list is empty.
## 
and_all [] = @false
and_all [x] = x
and_all [@false:xs] = @false
and_all [_:xs] = and_all xs
export and_all

##
# Returns `@true`, if any element in the given list is `@true`, otherwise
# `@false`. Returns `@false` if the given list is empty.
## 
or_all [] = @false
or_all [x] = x
or_all [@true:xs] = @true
or_all [_:xs] = or_all xs
export or_all
