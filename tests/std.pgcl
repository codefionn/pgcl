std = $ import std
sys = $ import sys

assert (0, std.id 0)
assert (1, std.id 1)

assert (0, std.right 0)
assert ((1 (2 3)), std.right ((1 2) 3))
assert ((1 (2 (3 4))), std.right (((1 2) 3) 4))
assert ((1 (2 (3 (4 5)))), std.right ((((1 2) 3) 4) 5))

assert ([], std.map (*) [])
assert ([2], std.map (\x x + x) [1])
assert ([2, 4], std.map (\x x + x) [1, 2])
assert ([1, 4, 9, 16], std.map (\x x * x) [1, 2, 3, 4])

assert (
  (std.foldl (+) 0 [0, 1, 2, 3, 4, 5]),
  (5 * (5 + 1)) / 2
)

assert (
  (std.foldr (+) 0 [0, 1, 2, 3, 4, 5]),
  (5 * (5 + 1)) / 2
)

assert (
  (std.head [1]),
  1
)

assert (
  (std.head [2, 1]),
  2
)

assert (
  (std.tail [2]),
  []
)

assert (
  (std.tail [2, 1]),
  [1]
)

assert (
  (std.tail [3, 2, 1]),
  [2, 1]
)

assert (
  (std.len []),
  0
)

assert (
  (std.len [1]),
  1
)

assert (
  (std.len [1, 2]),
  2
)

assert (
  (std.len [1, 2, 3]),
  3
)

assert (
  (std.len [[1, 1], 2, 3]),
  3
)

assert (
  (std.len [1, 2, [3, 1]]),
  3
)

assert (
  (std.offset 0 []),
  []
)

assert (
  (std.offset 0 [1]),
  [1]
)

assert (
  (std.offset 0 [1, 2]),
  [1, 2]
)

assert (
  (std.offset 0 [1, 2, 3]),
  [1, 2, 3]
)

assert (
  (std.offset 0 [1, 2, 1]),
  [1, 2, 1]
)

assert (
  (std.offset 0 [1, 2, 1, 3]),
  [1, 2, 1, 3]
)

assert (
  (std.offset 1 [1]),
  []
)

assert (
  (std.offset 1 [1, 2]),
  [2]
)

assert (
  (std.offset 1 [1, 2, 3]),
  [2, 3]
)

assert (
  (std.offset 1 [1, 2, 1]),
  [2, 1]
)

assert (
  (std.offset 1 [1, 2, 1, 3]),
  [2, 1, 3]
)

assert (
  (std.offset 2 [1]),
  []
)

assert (
  (std.offset 2 [1, 2]),
  []
)

assert (
  (std.offset 2 [1, 2, 3]),
  [3]
)

assert (
  (std.offset 2 [1, 2, 1]),
  [1]
)

assert (
  (std.offset 2 [1, 2, 1, 3]),
  [1, 3]
)

assert (
  (std.limit 0 []),
  []
)

assert (
  (std.limit 0 [1]),
  []
)

assert (
  (std.limit 0 [3, 1, 2]),
  []
)

assert (
  (std.limit 0 [3, 2, 1]),
  []
)

assert (
  (std.limit 1 []),
  []
)

assert (
  (std.limit 1 [1]),
  [1]
)

assert (
  (std.limit 1 [3, 1, 2]),
  [3]
)

assert (
  (std.limit 1 [3, 2, 1]),
  [3]
)

assert (
  (std.limit 2 []),
  []
)

assert (
  (std.limit 2 [1]),
  [1]
)

assert (
  (std.limit 2 [3, 1, 2]),
  [3, 1]
)

assert (
  (std.limit 2 [3, 2, 1]),
  [3, 2]
)

assert (
  (std.limit 3 []),
  []
)

assert (
  (std.limit 3 [1]),
  [1]
)

assert (
  (std.limit 3 [1, 2]),
  [1, 2]
)

assert (
  (std.limit 3 [3, 1, 2]),
  [3, 1, 2]
)

assert (
  (std.limit 3 [3, 2, 1]),
  [3, 2, 1]
)

let (_, success, failure) = sys.asserts in (
  sys.println ("Asserts succedded: " + success);
  sys.println ("Asserts failed: " + failure)
)
